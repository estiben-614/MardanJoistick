import {
  require_react
} from "./chunk-R2PSMBUW.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-CF3WPAMV.js";

// node_modules/nipplejs/dist/nipplejs.js
var require_nipplejs = __commonJS({
  "node_modules/nipplejs/dist/nipplejs.js"(exports, module) {
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.nipplejs = f();
      }
    })(function() {
      var define2, module2, exports2;
      "use strict";
      var isTouch = !!("ontouchstart" in window);
      var isPointer = window.PointerEvent ? true : false;
      var isMSPointer = window.MSPointerEvent ? true : false;
      var events = {
        touch: {
          start: "touchstart",
          move: "touchmove",
          end: "touchend, touchcancel"
        },
        mouse: {
          start: "mousedown",
          move: "mousemove",
          end: "mouseup"
        },
        pointer: {
          start: "pointerdown",
          move: "pointermove",
          end: "pointerup, pointercancel"
        },
        MSPointer: {
          start: "MSPointerDown",
          move: "MSPointerMove",
          end: "MSPointerUp"
        }
      };
      var toBind;
      var secondBind = {};
      if (isPointer) {
        toBind = events.pointer;
      } else if (isMSPointer) {
        toBind = events.MSPointer;
      } else if (isTouch) {
        toBind = events.touch;
        secondBind = events.mouse;
      } else {
        toBind = events.mouse;
      }
      var u = {};
      u.distance = function(p1, p2) {
        var dx = p2.x - p1.x;
        var dy = p2.y - p1.y;
        return Math.sqrt(dx * dx + dy * dy);
      };
      u.angle = function(p1, p2) {
        var dx = p2.x - p1.x;
        var dy = p2.y - p1.y;
        return u.degrees(Math.atan2(dy, dx));
      };
      u.findCoord = function(p, d, a) {
        var b = { x: 0, y: 0 };
        a = u.radians(a);
        b.x = p.x - d * Math.cos(a);
        b.y = p.y - d * Math.sin(a);
        return b;
      };
      u.radians = function(a) {
        return a * (Math.PI / 180);
      };
      u.degrees = function(a) {
        return a * (180 / Math.PI);
      };
      u.bindEvt = function(el, arg, handler) {
        var types = arg.split(/[ ,]+/g);
        var type;
        for (var i = 0; i < types.length; i += 1) {
          type = types[i];
          if (el.addEventListener) {
            el.addEventListener(type, handler, false);
          } else if (el.attachEvent) {
            el.attachEvent(type, handler);
          }
        }
      };
      u.unbindEvt = function(el, arg, handler) {
        var types = arg.split(/[ ,]+/g);
        var type;
        for (var i = 0; i < types.length; i += 1) {
          type = types[i];
          if (el.removeEventListener) {
            el.removeEventListener(type, handler);
          } else if (el.detachEvent) {
            el.detachEvent(type, handler);
          }
        }
      };
      u.trigger = function(el, type, data) {
        var evt = new CustomEvent(type, data);
        el.dispatchEvent(evt);
      };
      u.prepareEvent = function(evt) {
        evt.preventDefault();
        return evt.type.match(/^touch/) ? evt.changedTouches : evt;
      };
      u.getScroll = function() {
        var x = window.pageXOffset !== void 0 ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
        var y = window.pageYOffset !== void 0 ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
        return {
          x,
          y
        };
      };
      u.applyPosition = function(el, pos) {
        if (pos.top || pos.right || pos.bottom || pos.left) {
          el.style.top = pos.top;
          el.style.right = pos.right;
          el.style.bottom = pos.bottom;
          el.style.left = pos.left;
        } else {
          el.style.left = pos.x + "px";
          el.style.top = pos.y + "px";
        }
      };
      u.getTransitionStyle = function(property, values, time) {
        var obj = u.configStylePropertyObject(property);
        for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (typeof values === "string") {
              obj[i] = values + " " + time;
            } else {
              var st = "";
              for (var j = 0, max = values.length; j < max; j += 1) {
                st += values[j] + " " + time + ", ";
              }
              obj[i] = st.slice(0, -2);
            }
          }
        }
        return obj;
      };
      u.getVendorStyle = function(property, value) {
        var obj = u.configStylePropertyObject(property);
        for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            obj[i] = value;
          }
        }
        return obj;
      };
      u.configStylePropertyObject = function(prop) {
        var obj = {};
        obj[prop] = "";
        var vendors = ["webkit", "Moz", "o"];
        vendors.forEach(function(vendor) {
          obj[vendor + prop.charAt(0).toUpperCase() + prop.slice(1)] = "";
        });
        return obj;
      };
      u.extend = function(objA, objB) {
        for (var i in objB) {
          if (objB.hasOwnProperty(i)) {
            objA[i] = objB[i];
          }
        }
        return objA;
      };
      u.safeExtend = function(objA, objB) {
        var obj = {};
        for (var i in objA) {
          if (objA.hasOwnProperty(i) && objB.hasOwnProperty(i)) {
            obj[i] = objB[i];
          } else if (objA.hasOwnProperty(i)) {
            obj[i] = objA[i];
          }
        }
        return obj;
      };
      u.map = function(ar, fn) {
        if (ar.length) {
          for (var i = 0, max = ar.length; i < max; i += 1) {
            fn(ar[i]);
          }
        } else {
          fn(ar);
        }
      };
      function Super() {
      }
      ;
      Super.prototype.on = function(arg, cb) {
        var self2 = this;
        var types = arg.split(/[ ,]+/g);
        var type;
        self2._handlers_ = self2._handlers_ || {};
        for (var i = 0; i < types.length; i += 1) {
          type = types[i];
          self2._handlers_[type] = self2._handlers_[type] || [];
          self2._handlers_[type].push(cb);
        }
        return self2;
      };
      Super.prototype.off = function(type, cb) {
        var self2 = this;
        self2._handlers_ = self2._handlers_ || {};
        if (type === void 0) {
          self2._handlers_ = {};
        } else if (cb === void 0) {
          self2._handlers_[type] = null;
        } else if (self2._handlers_[type] && self2._handlers_[type].indexOf(cb) >= 0) {
          self2._handlers_[type].splice(self2._handlers_[type].indexOf(cb), 1);
        }
        return self2;
      };
      Super.prototype.trigger = function(arg, data) {
        var self2 = this;
        var types = arg.split(/[ ,]+/g);
        var type;
        self2._handlers_ = self2._handlers_ || {};
        for (var i = 0; i < types.length; i += 1) {
          type = types[i];
          if (self2._handlers_[type] && self2._handlers_[type].length) {
            self2._handlers_[type].forEach(function(handler) {
              handler.call(self2, {
                type,
                target: self2
              }, data);
            });
          }
        }
      };
      Super.prototype.config = function(options) {
        var self2 = this;
        self2.options = self2.defaults || {};
        if (options) {
          self2.options = u.safeExtend(self2.options, options);
        }
      };
      Super.prototype.bindEvt = function(el, type) {
        var self2 = this;
        self2._domHandlers_ = self2._domHandlers_ || {};
        self2._domHandlers_[type] = function() {
          if (typeof self2["on" + type] === "function") {
            self2["on" + type].apply(self2, arguments);
          } else {
            console.warn('[WARNING] : Missing "on' + type + '" handler.');
          }
        };
        u.bindEvt(el, toBind[type], self2._domHandlers_[type]);
        if (secondBind[type]) {
          u.bindEvt(el, secondBind[type], self2._domHandlers_[type]);
        }
        return self2;
      };
      Super.prototype.unbindEvt = function(el, type) {
        var self2 = this;
        self2._domHandlers_ = self2._domHandlers_ || {};
        u.unbindEvt(el, toBind[type], self2._domHandlers_[type]);
        if (secondBind[type]) {
          u.unbindEvt(el, secondBind[type], self2._domHandlers_[type]);
        }
        delete self2._domHandlers_[type];
        return this;
      };
      function Nipple(collection, options) {
        this.identifier = options.identifier;
        this.position = options.position;
        this.frontPosition = options.frontPosition;
        this.collection = collection;
        this.defaults = {
          size: 100,
          threshold: 0.1,
          color: "white",
          fadeTime: 250,
          dataOnly: false,
          restJoystick: true,
          restOpacity: 0.5,
          mode: "dynamic",
          zone: document.body,
          lockX: false,
          lockY: false
        };
        this.config(options);
        if (this.options.mode === "dynamic") {
          this.options.restOpacity = 0;
        }
        this.id = Nipple.id;
        Nipple.id += 1;
        this.buildEl().stylize();
        this.instance = {
          el: this.ui.el,
          on: this.on.bind(this),
          off: this.off.bind(this),
          show: this.show.bind(this),
          hide: this.hide.bind(this),
          add: this.addToDom.bind(this),
          remove: this.removeFromDom.bind(this),
          destroy: this.destroy.bind(this),
          resetDirection: this.resetDirection.bind(this),
          computeDirection: this.computeDirection.bind(this),
          trigger: this.trigger.bind(this),
          position: this.position,
          frontPosition: this.frontPosition,
          ui: this.ui,
          identifier: this.identifier,
          id: this.id,
          options: this.options
        };
        return this.instance;
      }
      ;
      Nipple.prototype = new Super();
      Nipple.constructor = Nipple;
      Nipple.id = 0;
      Nipple.prototype.buildEl = function(options) {
        this.ui = {};
        if (this.options.dataOnly) {
          return this;
        }
        this.ui.el = document.createElement("div");
        this.ui.back = document.createElement("div");
        this.ui.front = document.createElement("div");
        this.ui.el.className = "nipple collection_" + this.collection.id;
        this.ui.back.className = "back";
        this.ui.front.className = "front";
        this.ui.el.setAttribute("id", "nipple_" + this.collection.id + "_" + this.id);
        this.ui.el.appendChild(this.ui.back);
        this.ui.el.appendChild(this.ui.front);
        return this;
      };
      Nipple.prototype.stylize = function() {
        if (this.options.dataOnly) {
          return this;
        }
        var animTime = this.options.fadeTime + "ms";
        var borderStyle = u.getVendorStyle("borderRadius", "50%");
        var transitStyle = u.getTransitionStyle("transition", "opacity", animTime);
        var styles = {};
        styles.el = {
          position: "absolute",
          opacity: this.options.restOpacity,
          display: "block",
          "zIndex": 999
        };
        styles.back = {
          position: "absolute",
          display: "block",
          width: this.options.size + "px",
          height: this.options.size + "px",
          marginLeft: -this.options.size / 2 + "px",
          marginTop: -this.options.size / 2 + "px",
          background: this.options.color,
          "opacity": ".5"
        };
        styles.front = {
          width: this.options.size / 2 + "px",
          height: this.options.size / 2 + "px",
          position: "absolute",
          display: "block",
          marginLeft: -this.options.size / 4 + "px",
          marginTop: -this.options.size / 4 + "px",
          background: this.options.color,
          "opacity": ".5"
        };
        u.extend(styles.el, transitStyle);
        u.extend(styles.back, borderStyle);
        u.extend(styles.front, borderStyle);
        this.applyStyles(styles);
        return this;
      };
      Nipple.prototype.applyStyles = function(styles) {
        for (var i in this.ui) {
          if (this.ui.hasOwnProperty(i)) {
            for (var j in styles[i]) {
              this.ui[i].style[j] = styles[i][j];
            }
          }
        }
        return this;
      };
      Nipple.prototype.addToDom = function() {
        if (this.options.dataOnly || document.body.contains(this.ui.el)) {
          return this;
        }
        this.options.zone.appendChild(this.ui.el);
        return this;
      };
      Nipple.prototype.removeFromDom = function() {
        if (this.options.dataOnly || !document.body.contains(this.ui.el)) {
          return this;
        }
        this.options.zone.removeChild(this.ui.el);
        return this;
      };
      Nipple.prototype.destroy = function() {
        clearTimeout(this.removeTimeout);
        clearTimeout(this.showTimeout);
        clearTimeout(this.restTimeout);
        this.trigger("destroyed", this.instance);
        this.removeFromDom();
        this.off();
      };
      Nipple.prototype.show = function(cb) {
        var self2 = this;
        if (self2.options.dataOnly) {
          return self2;
        }
        clearTimeout(self2.removeTimeout);
        clearTimeout(self2.showTimeout);
        clearTimeout(self2.restTimeout);
        self2.addToDom();
        self2.restCallback();
        setTimeout(function() {
          self2.ui.el.style.opacity = 1;
        }, 0);
        self2.showTimeout = setTimeout(function() {
          self2.trigger("shown", self2.instance);
          if (typeof cb === "function") {
            cb.call(this);
          }
        }, self2.options.fadeTime);
        return self2;
      };
      Nipple.prototype.hide = function(cb) {
        var self2 = this;
        if (self2.options.dataOnly) {
          return self2;
        }
        self2.ui.el.style.opacity = self2.options.restOpacity;
        clearTimeout(self2.removeTimeout);
        clearTimeout(self2.showTimeout);
        clearTimeout(self2.restTimeout);
        self2.removeTimeout = setTimeout(
          function() {
            var display = self2.options.mode === "dynamic" ? "none" : "block";
            self2.ui.el.style.display = display;
            if (typeof cb === "function") {
              cb.call(self2);
            }
            self2.trigger("hidden", self2.instance);
          },
          self2.options.fadeTime
        );
        if (self2.options.restJoystick) {
          self2.restPosition();
        }
        return self2;
      };
      Nipple.prototype.restPosition = function(cb) {
        var self2 = this;
        self2.frontPosition = {
          x: 0,
          y: 0
        };
        var animTime = self2.options.fadeTime + "ms";
        var transitStyle = {};
        transitStyle.front = u.getTransitionStyle(
          "transition",
          ["top", "left"],
          animTime
        );
        var styles = { front: {} };
        styles.front = {
          left: self2.frontPosition.x + "px",
          top: self2.frontPosition.y + "px"
        };
        self2.applyStyles(transitStyle);
        self2.applyStyles(styles);
        self2.restTimeout = setTimeout(
          function() {
            if (typeof cb === "function") {
              cb.call(self2);
            }
            self2.restCallback();
          },
          self2.options.fadeTime
        );
      };
      Nipple.prototype.restCallback = function() {
        var self2 = this;
        var transitStyle = {};
        transitStyle.front = u.getTransitionStyle("transition", "none", "");
        self2.applyStyles(transitStyle);
        self2.trigger("rested", self2.instance);
      };
      Nipple.prototype.resetDirection = function() {
        this.direction = {
          x: false,
          y: false,
          angle: false
        };
      };
      Nipple.prototype.computeDirection = function(obj) {
        var rAngle = obj.angle.radian;
        var angle45 = Math.PI / 4;
        var angle90 = Math.PI / 2;
        var direction, directionX, directionY;
        if (rAngle > angle45 && rAngle < angle45 * 3 && !obj.lockX) {
          direction = "up";
        } else if (rAngle > -angle45 && rAngle <= angle45 && !obj.lockY) {
          direction = "left";
        } else if (rAngle > -angle45 * 3 && rAngle <= -angle45 && !obj.lockX) {
          direction = "down";
        } else if (!obj.lockY) {
          direction = "right";
        }
        if (!obj.lockY) {
          if (rAngle > -angle90 && rAngle < angle90) {
            directionX = "left";
          } else {
            directionX = "right";
          }
        }
        if (!obj.lockX) {
          if (rAngle > 0) {
            directionY = "up";
          } else {
            directionY = "down";
          }
        }
        if (obj.force > this.options.threshold) {
          var oldDirection = {};
          for (var i in this.direction) {
            if (this.direction.hasOwnProperty(i)) {
              oldDirection[i] = this.direction[i];
            }
          }
          var same = {};
          this.direction = {
            x: directionX,
            y: directionY,
            angle: direction
          };
          obj.direction = this.direction;
          for (var i in oldDirection) {
            if (oldDirection[i] === this.direction[i]) {
              same[i] = true;
            }
          }
          if (same.x && same.y && same.angle) {
            return obj;
          }
          if (!same.x || !same.y) {
            this.trigger("plain", obj);
          }
          if (!same.x) {
            this.trigger("plain:" + directionX, obj);
          }
          if (!same.y) {
            this.trigger("plain:" + directionY, obj);
          }
          if (!same.angle) {
            this.trigger("dir dir:" + direction, obj);
          }
        }
        return obj;
      };
      function Collection(manager, options) {
        var self2 = this;
        self2.nipples = [];
        self2.idles = [];
        self2.actives = [];
        self2.ids = [];
        self2.pressureIntervals = {};
        self2.manager = manager;
        self2.id = Collection.id;
        Collection.id += 1;
        self2.defaults = {
          zone: document.body,
          multitouch: false,
          maxNumberOfNipples: 10,
          mode: "dynamic",
          position: { top: 0, left: 0 },
          catchDistance: 200,
          size: 100,
          threshold: 0.1,
          color: "white",
          fadeTime: 250,
          dataOnly: false,
          restJoystick: true,
          restOpacity: 0.5,
          lockX: false,
          lockY: false
        };
        self2.config(options);
        if (self2.options.mode === "static" || self2.options.mode === "semi") {
          self2.options.multitouch = false;
        }
        if (!self2.options.multitouch) {
          self2.options.maxNumberOfNipples = 1;
        }
        self2.updateBox();
        self2.prepareNipples();
        self2.bindings();
        self2.begin();
        return self2.nipples;
      }
      Collection.prototype = new Super();
      Collection.constructor = Collection;
      Collection.id = 0;
      Collection.prototype.prepareNipples = function() {
        var self2 = this;
        var nips = self2.nipples;
        nips.on = self2.on.bind(self2);
        nips.off = self2.off.bind(self2);
        nips.options = self2.options;
        nips.destroy = self2.destroy.bind(self2);
        nips.ids = self2.ids;
        nips.id = self2.id;
        nips.processOnMove = self2.processOnMove.bind(self2);
        nips.processOnEnd = self2.processOnEnd.bind(self2);
        nips.get = function(id) {
          if (id === void 0) {
            return nips[0];
          }
          for (var i = 0, max = nips.length; i < max; i += 1) {
            if (nips[i].identifier === id) {
              return nips[i];
            }
          }
          return false;
        };
      };
      Collection.prototype.bindings = function() {
        var self2 = this;
        self2.bindEvt(self2.options.zone, "start");
        self2.options.zone.style.touchAction = "none";
        self2.options.zone.style.msTouchAction = "none";
      };
      Collection.prototype.begin = function() {
        var self2 = this;
        var opts = self2.options;
        if (opts.mode === "static") {
          var nipple = self2.createNipple(
            opts.position,
            self2.manager.getIdentifier()
          );
          nipple.add();
          self2.idles.push(nipple);
        }
      };
      Collection.prototype.createNipple = function(position, identifier) {
        var self2 = this;
        var scroll = u.getScroll();
        var toPutOn = {};
        var opts = self2.options;
        if (position.x && position.y) {
          toPutOn = {
            x: position.x - (scroll.x + self2.box.left),
            y: position.y - (scroll.y + self2.box.top)
          };
        } else if (position.top || position.right || position.bottom || position.left) {
          var dumb = document.createElement("DIV");
          dumb.style.display = "hidden";
          dumb.style.top = position.top;
          dumb.style.right = position.right;
          dumb.style.bottom = position.bottom;
          dumb.style.left = position.left;
          dumb.style.position = "absolute";
          opts.zone.appendChild(dumb);
          var dumbBox = dumb.getBoundingClientRect();
          opts.zone.removeChild(dumb);
          toPutOn = position;
          position = {
            x: dumbBox.left + scroll.x,
            y: dumbBox.top + scroll.y
          };
        }
        var nipple = new Nipple(self2, {
          color: opts.color,
          size: opts.size,
          threshold: opts.threshold,
          fadeTime: opts.fadeTime,
          dataOnly: opts.dataOnly,
          restJoystick: opts.restJoystick,
          restOpacity: opts.restOpacity,
          mode: opts.mode,
          identifier,
          position,
          zone: opts.zone,
          frontPosition: {
            x: 0,
            y: 0
          }
        });
        if (!opts.dataOnly) {
          u.applyPosition(nipple.ui.el, toPutOn);
          u.applyPosition(nipple.ui.front, nipple.frontPosition);
        }
        self2.nipples.push(nipple);
        self2.trigger("added " + nipple.identifier + ":added", nipple);
        self2.manager.trigger("added " + nipple.identifier + ":added", nipple);
        self2.bindNipple(nipple);
        return nipple;
      };
      Collection.prototype.updateBox = function() {
        var self2 = this;
        self2.box = self2.options.zone.getBoundingClientRect();
      };
      Collection.prototype.bindNipple = function(nipple) {
        var self2 = this;
        var type;
        var handler = function(evt, data) {
          type = evt.type + " " + data.id + ":" + evt.type;
          self2.trigger(type, data);
        };
        nipple.on("destroyed", self2.onDestroyed.bind(self2));
        nipple.on("shown hidden rested dir plain", handler);
        nipple.on("dir:up dir:right dir:down dir:left", handler);
        nipple.on("plain:up plain:right plain:down plain:left", handler);
      };
      Collection.prototype.pressureFn = function(touch, nipple, identifier) {
        var self2 = this;
        var previousPressure = 0;
        clearInterval(self2.pressureIntervals[identifier]);
        self2.pressureIntervals[identifier] = setInterval((function() {
          var pressure = touch.force || touch.pressure || touch.webkitForce || 0;
          if (pressure !== previousPressure) {
            nipple.trigger("pressure", pressure);
            self2.trigger("pressure " + nipple.identifier + ":pressure", pressure);
            previousPressure = pressure;
          }
        }).bind(self2), 100);
      };
      Collection.prototype.onstart = function(evt) {
        var self2 = this;
        var opts = self2.options;
        evt = u.prepareEvent(evt);
        self2.updateBox();
        var process2 = function(touch) {
          if (self2.actives.length < opts.maxNumberOfNipples) {
            self2.processOnStart(touch);
          }
        };
        u.map(evt, process2);
        self2.manager.bindDocument();
        return false;
      };
      Collection.prototype.processOnStart = function(evt) {
        var self2 = this;
        var opts = self2.options;
        var indexInIdles;
        var identifier = self2.manager.getIdentifier(evt);
        var pressure = evt.force || evt.pressure || evt.webkitForce || 0;
        var position = {
          x: evt.pageX,
          y: evt.pageY
        };
        var nipple = self2.getOrCreate(identifier, position);
        if (nipple.identifier !== identifier) {
          self2.manager.removeIdentifier(nipple.identifier);
        }
        nipple.identifier = identifier;
        var process2 = function(nip) {
          nip.trigger("start", nip);
          self2.trigger("start " + nip.id + ":start", nip);
          nip.show();
          if (pressure > 0) {
            self2.pressureFn(evt, nip, nip.identifier);
          }
          self2.processOnMove(evt);
        };
        if ((indexInIdles = self2.idles.indexOf(nipple)) >= 0) {
          self2.idles.splice(indexInIdles, 1);
        }
        self2.actives.push(nipple);
        self2.ids.push(nipple.identifier);
        if (opts.mode !== "semi") {
          process2(nipple);
        } else {
          var distance = u.distance(position, nipple.position);
          if (distance <= opts.catchDistance) {
            process2(nipple);
          } else {
            nipple.destroy();
            self2.processOnStart(evt);
            return;
          }
        }
        return nipple;
      };
      Collection.prototype.getOrCreate = function(identifier, position) {
        var self2 = this;
        var opts = self2.options;
        var nipple;
        if (/(semi|static)/.test(opts.mode)) {
          nipple = self2.idles[0];
          if (nipple) {
            self2.idles.splice(0, 1);
            return nipple;
          }
          if (opts.mode === "semi") {
            return self2.createNipple(position, identifier);
          }
          console.warn("Coudln't find the needed nipple.");
          return false;
        }
        nipple = self2.createNipple(position, identifier);
        return nipple;
      };
      Collection.prototype.processOnMove = function(evt) {
        var self2 = this;
        var opts = self2.options;
        var identifier = self2.manager.getIdentifier(evt);
        var nipple = self2.nipples.get(identifier);
        if (!nipple) {
          console.error("Found zombie joystick with ID " + identifier);
          self2.manager.removeIdentifier(identifier);
          return;
        }
        nipple.identifier = identifier;
        var size = nipple.options.size / 2;
        var pos = {
          x: evt.pageX,
          y: evt.pageY
        };
        var dist = u.distance(pos, nipple.position);
        var angle = u.angle(pos, nipple.position);
        var rAngle = u.radians(angle);
        var force = dist / size;
        if (dist > size) {
          dist = size;
          pos = u.findCoord(nipple.position, dist, angle);
        }
        var xPosition = pos.x - nipple.position.x;
        var yPosition = pos.y - nipple.position.y;
        if (opts.lockX) {
          yPosition = 0;
        }
        if (opts.lockY) {
          xPosition = 0;
        }
        nipple.frontPosition = {
          x: xPosition,
          y: yPosition
        };
        if (!opts.dataOnly) {
          u.applyPosition(nipple.ui.front, nipple.frontPosition);
        }
        var toSend = {
          identifier: nipple.identifier,
          position: pos,
          force,
          pressure: evt.force || evt.pressure || evt.webkitForce || 0,
          distance: dist,
          angle: {
            radian: rAngle,
            degree: angle
          },
          instance: nipple,
          lockX: opts.lockX,
          lockY: opts.lockY
        };
        toSend = nipple.computeDirection(toSend);
        toSend.angle = {
          radian: u.radians(180 - angle),
          degree: 180 - angle
        };
        nipple.trigger("move", toSend);
        self2.trigger("move " + nipple.id + ":move", toSend);
      };
      Collection.prototype.processOnEnd = function(evt) {
        var self2 = this;
        var opts = self2.options;
        var identifier = self2.manager.getIdentifier(evt);
        var nipple = self2.nipples.get(identifier);
        var removedIdentifier = self2.manager.removeIdentifier(nipple.identifier);
        if (!nipple) {
          return;
        }
        if (!opts.dataOnly) {
          nipple.hide(function() {
            if (opts.mode === "dynamic") {
              nipple.trigger("removed", nipple);
              self2.trigger("removed " + nipple.id + ":removed", nipple);
              self2.manager.trigger("removed " + nipple.id + ":removed", nipple);
              nipple.destroy();
            }
          });
        }
        clearInterval(self2.pressureIntervals[nipple.identifier]);
        nipple.resetDirection();
        nipple.trigger("end", nipple);
        self2.trigger("end " + nipple.id + ":end", nipple);
        if (self2.ids.indexOf(nipple.identifier) >= 0) {
          self2.ids.splice(self2.ids.indexOf(nipple.identifier), 1);
        }
        if (self2.actives.indexOf(nipple) >= 0) {
          self2.actives.splice(self2.actives.indexOf(nipple), 1);
        }
        if (/(semi|static)/.test(opts.mode)) {
          self2.idles.push(nipple);
        } else if (self2.nipples.indexOf(nipple) >= 0) {
          self2.nipples.splice(self2.nipples.indexOf(nipple), 1);
        }
        self2.manager.unbindDocument();
        if (/(semi|static)/.test(opts.mode)) {
          self2.manager.ids[removedIdentifier.id] = removedIdentifier.identifier;
        }
      };
      Collection.prototype.onDestroyed = function(evt, nipple) {
        var self2 = this;
        if (self2.nipples.indexOf(nipple) >= 0) {
          self2.nipples.splice(self2.nipples.indexOf(nipple), 1);
        }
        if (self2.actives.indexOf(nipple) >= 0) {
          self2.actives.splice(self2.actives.indexOf(nipple), 1);
        }
        if (self2.idles.indexOf(nipple) >= 0) {
          self2.idles.splice(self2.idles.indexOf(nipple), 1);
        }
        if (self2.ids.indexOf(nipple.identifier) >= 0) {
          self2.ids.splice(self2.ids.indexOf(nipple.identifier), 1);
        }
        self2.manager.removeIdentifier(nipple.identifier);
        self2.manager.unbindDocument();
      };
      Collection.prototype.destroy = function() {
        var self2 = this;
        self2.unbindEvt(self2.options.zone, "start");
        self2.nipples.forEach(function(nipple) {
          nipple.destroy();
        });
        for (var i in self2.pressureIntervals) {
          if (self2.pressureIntervals.hasOwnProperty(i)) {
            clearInterval(self2.pressureIntervals[i]);
          }
        }
        self2.trigger("destroyed", self2.nipples);
        self2.manager.unbindDocument();
        self2.off();
      };
      function Manager(options) {
        var self2 = this;
        self2.ids = {};
        self2.index = 0;
        self2.collections = [];
        self2.config(options);
        self2.prepareCollections();
        var resizeTimer;
        u.bindEvt(window, "resize", function(evt) {
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout(function() {
            var pos;
            var scroll = u.getScroll();
            self2.collections.forEach(function(collection) {
              collection.forEach(function(nipple) {
                pos = nipple.el.getBoundingClientRect();
                nipple.position = {
                  x: scroll.x + pos.left,
                  y: scroll.y + pos.top
                };
              });
            });
          }, 100);
        });
        return self2.collections;
      }
      ;
      Manager.prototype = new Super();
      Manager.constructor = Manager;
      Manager.prototype.prepareCollections = function() {
        var self2 = this;
        self2.collections.create = self2.create.bind(self2);
        self2.collections.on = self2.on.bind(self2);
        self2.collections.off = self2.off.bind(self2);
        self2.collections.destroy = self2.destroy.bind(self2);
        self2.collections.get = function(id) {
          var nipple;
          self2.collections.every(function(collection) {
            if (nipple = collection.get(id)) {
              return false;
            }
            return true;
          });
          return nipple;
        };
      };
      Manager.prototype.create = function(options) {
        return this.createCollection(options);
      };
      Manager.prototype.createCollection = function(options) {
        var self2 = this;
        var collection = new Collection(self2, options);
        self2.bindCollection(collection);
        self2.collections.push(collection);
        return collection;
      };
      Manager.prototype.bindCollection = function(collection) {
        var self2 = this;
        var type;
        var handler = function(evt, data) {
          type = evt.type + " " + data.id + ":" + evt.type;
          self2.trigger(type, data);
        };
        collection.on("destroyed", self2.onDestroyed.bind(self2));
        collection.on("shown hidden rested dir plain", handler);
        collection.on("dir:up dir:right dir:down dir:left", handler);
        collection.on("plain:up plain:right plain:down plain:left", handler);
      };
      Manager.prototype.bindDocument = function() {
        var self2 = this;
        if (!self2.binded) {
          self2.bindEvt(document, "move").bindEvt(document, "end");
          self2.binded = true;
        }
      };
      Manager.prototype.unbindDocument = function(force) {
        var self2 = this;
        if (!Object.keys(self2.ids).length || force === true) {
          self2.unbindEvt(document, "move").unbindEvt(document, "end");
          self2.binded = false;
        }
      };
      Manager.prototype.getIdentifier = function(evt) {
        var id;
        if (!evt) {
          id = this.index;
        } else {
          id = evt.identifier === void 0 ? evt.pointerId : evt.identifier;
          if (id === void 0) {
            id = this.latest || 0;
          }
        }
        if (this.ids[id] === void 0) {
          this.ids[id] = this.index;
          this.index += 1;
        }
        this.latest = id;
        return this.ids[id];
      };
      Manager.prototype.removeIdentifier = function(identifier) {
        var removed = {};
        for (var id in this.ids) {
          if (this.ids[id] === identifier) {
            removed.id = id;
            removed.identifier = this.ids[id];
            delete this.ids[id];
            break;
          }
        }
        return removed;
      };
      Manager.prototype.onmove = function(evt) {
        var self2 = this;
        self2.onAny("move", evt);
        return false;
      };
      Manager.prototype.onend = function(evt) {
        var self2 = this;
        self2.onAny("end", evt);
        return false;
      };
      Manager.prototype.oncancel = function(evt) {
        var self2 = this;
        self2.onAny("end", evt);
        return false;
      };
      Manager.prototype.onAny = function(which, evt) {
        var self2 = this;
        var id;
        var processFn = "processOn" + which.charAt(0).toUpperCase() + which.slice(1);
        evt = u.prepareEvent(evt);
        var processColl = function(e, id2, coll) {
          if (coll.ids.indexOf(id2) >= 0) {
            coll[processFn](e);
            e._found_ = true;
          }
        };
        var processEvt = function(e) {
          id = self2.getIdentifier(e);
          u.map(self2.collections, processColl.bind(null, e, id));
          if (!e._found_) {
            self2.removeIdentifier(id);
          }
        };
        u.map(evt, processEvt);
        return false;
      };
      Manager.prototype.destroy = function() {
        var self2 = this;
        self2.unbindDocument(true);
        self2.ids = {};
        self2.index = 0;
        self2.collections.forEach(function(collection) {
          collection.destroy();
        });
        self2.off();
      };
      Manager.prototype.onDestroyed = function(evt, coll) {
        var self2 = this;
        if (self2.collections.indexOf(coll) < 0) {
          return false;
        }
        self2.collections.splice(self2.collections.indexOf(coll), 1);
      };
      var factory = new Manager();
      return {
        create: function(options) {
          return factory.create(options);
        },
        factory
      };
    });
  }
});

// node_modules/autobind-decorator/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  boundClass: () => boundClass,
  boundMethod: () => boundMethod,
  default: () => autobind
});
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function boundMethod(target, key, descriptor) {
  var fn = descriptor.value;
  if (typeof fn !== "function") {
    throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(_typeof(fn)));
  }
  var definingProperty = false;
  return {
    configurable: true,
    get: function get() {
      if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== "function") {
        return fn;
      }
      var boundFn = fn.bind(this);
      definingProperty = true;
      Object.defineProperty(this, key, {
        configurable: true,
        get: function get2() {
          return boundFn;
        },
        set: function set(value) {
          fn = value;
          delete this[key];
        }
      });
      definingProperty = false;
      return boundFn;
    },
    set: function set(value) {
      fn = value;
    }
  };
}
function boundClass(target) {
  var keys;
  if (typeof Reflect !== "undefined" && typeof Reflect.ownKeys === "function") {
    keys = Reflect.ownKeys(target.prototype);
  } else {
    keys = Object.getOwnPropertyNames(target.prototype);
    if (typeof Object.getOwnPropertySymbols === "function") {
      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
    }
  }
  keys.forEach(function(key) {
    if (key === "constructor") {
      return;
    }
    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);
    if (typeof descriptor.value === "function") {
      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
    }
  });
  return target;
}
function autobind() {
  if (arguments.length === 1) {
    return boundClass.apply(void 0, arguments);
  }
  return boundMethod.apply(void 0, arguments);
}
var init_esm = __esm({
  "node_modules/autobind-decorator/lib/esm/index.js"() {
  }
});

// node_modules/lodash.isequal/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.isequal/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set = getNative(root, "Set");
    var WeakMap = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set);
    var weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = isEqual;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      var nativeCodeString = "[native code]";
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
              classes.push(arg.toString());
              continue;
            }
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/react-nipple/lib/ReactNipple.js
var require_ReactNipple = __commonJS({
  "node_modules/react-nipple/lib/ReactNipple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray = function() {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = void 0;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"])
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      return function(arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _class;
    var _nipplejs = require_nipplejs();
    var _nipplejs2 = _interopRequireDefault(_nipplejs);
    var _autobindDecorator = (init_esm(), __toCommonJS(esm_exports));
    var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);
    var _lodash = require_lodash();
    var _lodash2 = _interopRequireDefault(_lodash);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _classnames = require_classnames();
    var _classnames2 = _interopRequireDefault(_classnames);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self2, call) {
      if (!self2) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
      var desc = {};
      Object["keys"](descriptor).forEach(function(key) {
        desc[key] = descriptor[key];
      });
      desc.enumerable = !!desc.enumerable;
      desc.configurable = !!desc.configurable;
      if ("value" in desc || desc.initializer) {
        desc.writable = true;
      }
      desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
        return decorator(target, property, desc2) || desc2;
      }, desc);
      if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = void 0;
      }
      if (desc.initializer === void 0) {
        Object["defineProperty"](target, property, desc);
        desc = null;
      }
      return desc;
    }
    var ReactNipple = (_class = function(_Component) {
      _inherits(ReactNipple2, _Component);
      function ReactNipple2() {
        _classCallCheck(this, ReactNipple2);
        return _possibleConstructorReturn(this, (ReactNipple2.__proto__ || Object.getPrototypeOf(ReactNipple2)).apply(this, arguments));
      }
      _createClass(ReactNipple2, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!(0, _lodash2.default)(prevProps.options, this.props.options)) {
            this.destroyJoystick();
            this.createJoystick();
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement("div", _extends({}, this.elementProps, { ref: this.handleElement, className: (0, _classnames2.default)("ReactNipple", this.props.className) }));
        }
        //-----------------------------------
        //
        // impl
        //
        //-----------------------------------
      }, {
        key: "handleElement",
        value: function handleElement(ref) {
          this._element = ref;
          if (ref) {
            this.createJoystick(this.props);
          } else if (this._element) {
            this.destroyJoystick();
          }
        }
      }, {
        key: "createJoystick",
        value: function createJoystick(props) {
          var options = _extends({
            zone: this._element
          }, props.options);
          if (this.props.static) {
            options.mode = "static";
            options.position = {
              top: "50%",
              left: "50%"
            };
          }
          var joystick = _nipplejs2.default.create(options);
          joystick.on("start", this.handleJoystickStart);
          joystick.on("end", this.handleJoystickEnd);
          joystick.on("move", this.handleJoystickMove);
          joystick.on("dir", this.handleJoystickDir);
          joystick.on("plain", this.handleJoystickPlain);
          joystick.on("shown", this.handleJoystickShown);
          joystick.on("hidden", this.handleJoystickHidden);
          joystick.on("pressure", this.handleJoystickPressure);
          this.joystick = joystick;
          if (props.onCreated) {
            props.onCreated(this.joystick);
          }
        }
      }, {
        key: "destroyJoystick",
        value: function destroyJoystick() {
          if (this.joystick) {
            this.joystick.destroy();
            this.joystick = void 0;
          }
        }
      }, {
        key: "invokeCallback",
        value: function invokeCallback(type, evt, data) {
          if (this.props[type]) {
            this.props[type](evt, data);
          }
        }
      }, {
        key: "handleJoystickStart",
        value: function handleJoystickStart(evt, data) {
          this.invokeCallback("onStart", evt, data);
        }
      }, {
        key: "handleJoystickEnd",
        value: function handleJoystickEnd(evt, data) {
          this.invokeCallback("onEnd", evt, data);
        }
      }, {
        key: "handleJoystickMove",
        value: function handleJoystickMove(evt, data) {
          this.invokeCallback("onMove", evt, data);
        }
      }, {
        key: "handleJoystickDir",
        value: function handleJoystickDir(evt, data) {
          this.invokeCallback("onDir", evt, data);
        }
      }, {
        key: "handleJoystickPlain",
        value: function handleJoystickPlain(evt, data) {
          this.invokeCallback("onPlain", evt, data);
        }
      }, {
        key: "handleJoystickShown",
        value: function handleJoystickShown(evt, data) {
          this.invokeCallback("onShown", evt, data);
        }
      }, {
        key: "handleJoystickHidden",
        value: function handleJoystickHidden(evt, data) {
          this.invokeCallback("onHidden", evt, data);
        }
      }, {
        key: "handleJoystickPressure",
        value: function handleJoystickPressure(evt, data) {
          this.invokeCallback("onPressure", evt, data);
        }
      }, {
        key: "ownProps",
        get: function get() {
          return ["options", "static", "onStart", "onEnd", "onMove", "onDir", "onPlain", "onShown", "onHidden", "onPressure", "onCreated"];
        }
      }, {
        key: "elementProps",
        get: function get() {
          var _this2 = this;
          return Object.entries(this.props).reduce(function(result, _ref) {
            var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
            if (_this2.ownProps.includes(key)) {
              return result;
            }
            result[key] = value;
            return result;
          }, {});
        }
      }], [{
        key: "propTypes",
        /* eslint-disable no-trailing-spaces */
        /**
         * Component propTypes
         *
         * Any additional (unknown) props will be passed along as attributes of the created DOM element.
         *
         * @property {string} className - A css classname for the DOM element
         * @property {object} options - An object with nipplejs options, see https://github.com/yoannmoinet/nipplejs#options
         * @property {boolean} static - A shortcut for setting the options `{mode: 'static', position: {top: '50%', left: '50%'}}`. Will override values in the `options` object.
         * @property {function} onCreated - Callback that is invoked with the created instance
         * @property {function} onDestroy - Callback that is invoked with the instance that is going to be destroyed
         * @property {function} onStart - Callback for the 'start' event handler, see https://github.com/yoannmoinet/nipplejs#start
         * @property {function} onEnd - Callback for the 'end' event handler, see https://github.com/yoannmoinet/nipplejs#end
         * @property {function} onMove - Callback for the 'move' event handler, see https://github.com/yoannmoinet/nipplejs#move
         * @property {function} onDir - Callback for the 'dir' event handler, see https://github.com/yoannmoinet/nipplejs#dir
         * @property {function} onPlain - Callback for the 'plain' event handler, see https://github.com/yoannmoinet/nipplejs#plain
         * @property {function} onShown - Callback for the 'shown' event handler, see https://github.com/yoannmoinet/nipplejs#shown
         * @property {function} onHidden - Callback for the 'hidden' event handler, see https://github.com/yoannmoinet/nipplejs#hidden
         * @property {function} onPressure - Callback for the 'pressure' event handler, see https://github.com/yoannmoinet/nipplejs#pressure
         */
        /* eslint-enable no-trailing-spaces */
        get: function get() {
          return {
            className: _propTypes2.default.string,
            options: _propTypes2.default.shape({
              color: _propTypes2.default.string,
              size: _propTypes2.default.integer,
              threshold: _propTypes2.default.float,
              // before triggering a directional event
              fadeTime: _propTypes2.default.integer,
              // transition time
              multitouch: _propTypes2.default.bool,
              maxNumberOfNipples: _propTypes2.default.number,
              // when multitouch, what is too many?
              dataOnly: _propTypes2.default.bool,
              // no dom element whatsoever
              position: _propTypes2.default.object,
              // preset position for 'static' mode
              mode: _propTypes2.default.string,
              // 'dynamic', 'static' or 'semi'
              restJoystick: _propTypes2.default.bool,
              restOpacity: _propTypes2.default.number,
              // opacity when not 'dynamic' and rested
              catchDistance: _propTypes2.default.number
            }),
            static: _propTypes2.default.bool,
            onStart: _propTypes2.default.func,
            onEnd: _propTypes2.default.func,
            onMove: _propTypes2.default.func,
            onDir: _propTypes2.default.func,
            onPlain: _propTypes2.default.func,
            onShown: _propTypes2.default.func,
            onHidden: _propTypes2.default.func,
            onPressure: _propTypes2.default.func,
            onCreated: _propTypes2.default.func,
            onDestroy: _propTypes2.default.func
          };
        }
      }]);
      return ReactNipple2;
    }(_react.Component), _applyDecoratedDescriptor(_class.prototype, "handleElement", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickStart", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickEnd", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickEnd"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickMove", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickMove"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickDir", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickDir"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickPlain", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickPlain"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickShown", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickShown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickHidden", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickHidden"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleJoystickPressure", [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, "handleJoystickPressure"), _class.prototype), _class);
    exports.default = ReactNipple;
  }
});

// node_modules/react-nipple/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-nipple/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ReactNipple = require_ReactNipple();
    var _ReactNipple2 = _interopRequireDefault(_ReactNipple);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _ReactNipple2.default;
  }
});
export default require_lib();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-nipple.js.map
